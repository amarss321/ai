version: '3.8'

services:
  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  # Backend service
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - mongodb
      - rabbitmq
    environment:
      - DATABASE_URL=mongodb://mongodb:27017/meeting_assistant
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - SNS_PLATFORM_APPLICATION_ARN=${SNS_PLATFORM_APPLICATION_ARN}
      - WHISPER_MODEL_SIZE=${WHISPER_MODEL_SIZE:-base}
    volumes:
      - ./backend:/app/backend
    networks:
      - app-network
    restart: unless-stopped

  # MongoDB service
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - app-network
    restart: unless-stopped

  # RabbitMQ service
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  mongodb-data:
  rabbitmq-data:



#added text here
